=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
*** Implement 'gravity'.

Clearing a line can leave blocks above 'floating without support'.
Identifying blocks of which came from the same original Shape
(recording block number in fragments?) so they can fall as a chunk,
when no part of the chunk is supported anymore.
This could lead to chain reactions of fall, clear, fall, etc.

NOTE: dropping individual squares is wrong. That would cause
it to instantly clear all lines, regardless of user behavior.

-------------------------------------------------------
--- make '5' do instant-resume, if already paused.

-------------------------------------------------------
--- Display the next piece.

-------------------------------------------------------
--- Next piece placed randomly across top row. 

-------------------------------------------------------
--- Make color scheme selectable.

As of 2015-10-18, the GUI was fairly crowded, so this
task would probably require adding a menu of
"Controls", "About", "Quit". 

-------------------------------------------------------
*** Delay lock of fallen pieces.

This would give the user a fraction of dt to slide blocks
horizontally, so that gaps can be filled. Most obvious
approach is to have it take steps every dt/2, and lock
the piece on tick *after* it fell. Because the keyboard
events are handled asychronously as they occur, this
would give the user dt/2 to move the piece.

-------------------------------------------------------
--- Display the line count and  score.

I have a basic scoring algorithm in place:
Lines  Score   Increment
0      0
1      100     100
2      250     150
3      475     225
4      800     325

n>4    n*250, as follows:
5      1250
6      1500
7      1750
8      2000
9      2250
10     2500


The 100 and 800 values are fixed by tradition.
In between, I raise the per-line-score by a fixed
multiple, 'a'. For 'n' lines, the score is n * 100 * (1/a) * (a^n)
I just solved for 'a', then rounded the resulting values.

-------------------------------------------------------
--- Time-keeping.

For example, limit total play in a game to 10 minutes, counting
only non-paused time.

-------------------------------------------------------
--- Detect full box.

If top piece cannot be placed, end the game, and pause.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
