# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cxx}
comment {// --------------------------------------------
// Copyright KAPSARC. Open source MIT License.
// --------------------------------------------} {in_source in_header
} 

decl {\#include "tmain.h"} {public local
} 

decl {\#include "tcanvas.h"} {public local
} 

decl {\#include "pvcanvas.h"} {public local
} 

decl {\#include "tmain.h"} {private global
} 

decl {using KGraph::Canvas;} {public local
} 

decl {using Tetris::TCanvas;} {public local
} 

decl {using Tetris::PVCanvas;} {public local
} 

decl {using Tetris::TApp;} {public local
} 

decl {using Tetris::ControlState;} {public local
} 

class AboutUI {} {
  Function {AboutUI()} {open
  } {
    Fl_Window aw {
      label {About FTetris} open
      xywh {175 271 260 335} type Double color 215 hide
    } {
      Fl_Box {} {
        label {FTetris is a classic Тетрис game.
It was implemented with FLTK as a
testbed for KGraph. The code is
open source under the MIT License.
The commands are pretty standard:

left:      4 (left arrow)
right:     6 (right arrow)
hard drop: 8 (up arrow), space bar
soft drop: 2 (down arrow)

rotate R (CW):  3, 9, x
rotate L (CCW): 1, 7, z

pause/resume: 5
pause: p
resume with delay:   r
new game: n
quit: q
}
        xywh {5 8 246 293} align 20
      }
      Fl_Return_Button {} {
        label Dismiss
        callback {aw->hide();}
        xywh {150 305 105 25}
      }
    }
  }
  Function {~AboutUI()} {open
  } {
    code {// nothing yet} {}
  }
} 

class ControlUI {} {
  Function {ControlUI()} {open
  } {
    Fl_Window mw {
      label Controls open
      xywh {362 238 290 185} type Double modal visible
    } {
      Fl_Choice bgChoice {
        label Background
        callback {currState.bg = bgChoice->value();
printf("Reset currState.bg to %i \\n", currState.bg);
return;} open
        xywh {100 20 85 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label Beige
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label Black
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label White
          xywh {0 0 100 20}
        }
      }
      Fl_Choice pcChoice {
        label {Piece Colors}
        callback {currState.pc = pcChoice->value();
printf("Reset currState.pc to %i \\n",currState.pc);
return;} open
        xywh {100 55 148 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label {Game Boy}
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label Gerasimov
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label Sega
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label {Soviet Mind Game}
          xywh {40 40 139 20}
        }
        MenuItem {} {
          label {Tetris Company}
          xywh {10 10 100 20}
        }
      }
      Fl_Choice gtChoice {
        label {Game Time}
        callback {currState.gt = gtChoice->value();
printf("Reset currState.gt to %i \\n",currState.gt);
return;} open
        xywh {101 90 100 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label { 1 Minute}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label { 5 Minutes}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label {10 Minutes}
          xywh {30 30 100 20}
        }
      }
      Fl_Round_Button randomToggle {
        label Random
        callback {currState.rt = randomToggle->value();
printf("Reset currState.rt to %i \\n",currState.rt);
return;}
        xywh {100 120 20 25} down_box ROUND_DOWN_BOX align 4
      }
      Fl_Button {} {
        label Reset
        callback {setState(initState);
currState = initState;
Tetris::TApp::theApp->applyControlState(currState);
return;}
        tooltip {Reset to initial values} xywh {15 155 85 25}
      }
      Fl_Button {} {
        label Apply
        callback {Tetris::TApp::theApp->applyControlState(currState);
return;}
        tooltip {Apply the current values} xywh {107 155 85 25}
      }
      Fl_Return_Button {} {
        label Dismiss
        callback {lower();
mw->hide();}
        xywh {200 155 85 25}
      }
    }
    code {setDefault();
setState(dfltState);
currState = dfltState;} {}
  }
  Function {setDefault()} {open return_type void
  } {
    code {dfltState = ControlState(1, 2, 1, 0);
return;} {}
  }
  decl {ControlState dfltState;} {private local
  }
  decl {ControlState initState;} {private local
  }
  decl {ControlState currState;} {private local
  }
  Function {raise()} {return_type void
  } {
    code {initState = recordState();
currState = initState;
mw->show();
return;} {}
  }
  Function {setState(ControlState cs)} {return_type void
  } {
    code {bgChoice->value(cs.bg);
pcChoice->value(cs.pc);
gtChoice->value(cs.gt);
randomToggle->value(cs.rt);
return;} {}
  }
  Function {recordState()} {return_type ControlState
  } {
    code {auto cs = ControlState();
cs.bg = bgChoice->value();
cs.pc = pcChoice->value();
cs.gt = gtChoice->value();
cs.rt = randomToggle->value();
return cs;} {}
  }
  Function {lower()} {
    comment {apply the changes (if any)} open return_type void
  } {
    code {mw->hide();
Tetris::TApp::theApp->applyControlState(currState);
return;} {}
  }
} 

class NoticeUI {} {
  Function {NoticeUI()} {open
  } {
    Fl_Window nw {
      label Notice open
      xywh {459 748 265 105} type Double color 215 hide modal
    } {
      Fl_Box {} {
        label {Game Over}
        xywh {0 5 269 65} labelfont 1 labelsize 23 align 16
      }
      Fl_Return_Button {} {
        label Dismiss
        callback {Tetris::TApp::theApp->newGame();
TetrisUI::theUI->timeProgress->value(0.0);
nw->hide();
return;}
        xywh {165 75 95 25}
      }
    }
  }
  Function {~NoticeUI()} {open
  } {
    code {// nothing yet} {}
  }
} 

class TetrisUI {open
} {
  Function {TetrisUI(unsigned int r, unsigned int c)} {open
  } {
    Fl_Window mainW {
      label {FTetris 1.0} open
      xywh {242 163 400 520} type Double color 215 hide resizable size_range {280 365 800 1040}
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 402 25} color 215
      } {
        Submenu {} {
          label File open
          xywh {0 0 62 20}
        } {
          MenuItem {} {
            label Controls
            callback {controls->raise();}
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label About
            callback {about->aw->show();}
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label Quit
            callback {TApp::theApp->quit();} selected
            xywh {0 0 30 20}
          }
        }
      }
      Fl_Box playW {
        xywh {155 30 235 470} box THIN_DOWN_BOX color 55
        class TCanvas
      }
      Fl_Box previewW {
        callback {// nothing yet}
        xywh {35 90 90 60} box THIN_DOWN_BOX color 55
        class PVCanvas
      }
      Fl_Group {} {open
        xywh {5 255 140 105} labelfont 1 labelsize 16
      } {
        Fl_Counter counterLevel {
          label {Level }
          callback {using Tetris::TApp;
unsigned int lvl =  counterLevel->value();
//printf("Old Level %i \\n", TApp::theApp->level);
//printf("New Level %i \\n", lvl);
TApp::theApp->level = lvl;
return;}
          xywh {60 260 70 25} type Simple box THIN_DOWN_BOX align 4 minimum 1 maximum 10 step 1 value 3
        }
        Fl_Counter counterRows {
          label {Rows }
          callback {using Tetris::TApp;
unsigned int rOld =  TApp::theApp->rows;
unsigned int cOld =  TApp::theApp->clms;
unsigned int rNew =  counterRows->value();
//printf("Old rows %i \\n", rOld);
//printf("New rows %i \\n", rNew);
TApp::theApp->setRC(rNew, cOld);
return;}
          xywh {60 290 70 25} type Simple box THIN_DOWN_BOX align 4 minimum 16 maximum 32 step 1 value 24
        }
        Fl_Counter counterClms {
          label {Clms }
          callback {using Tetris::TApp;
unsigned int rOld =  TApp::theApp->rows;
unsigned int cOld =  TApp::theApp->clms;
unsigned int cNew =  counterClms->value();
unsigned int rNew = 2*cNew;
//printf("Old clms %i \\n", cOld);
//printf("New clms %i \\n", cNew);
TApp::theApp->setRC(rNew, cNew);
return;}
          xywh {60 320 70 25} type Simple box THIN_DOWN_BOX align 4 minimum 8 maximum 16 step 1 value 12
        }
      }
      Fl_Group {} {open
        xywh {5 170 145 75} labelfont 1 labelsize 16
      } {
        Fl_Output outputScore {
          label {Score }
          xywh {60 180 70 25} box THIN_DOWN_BOX
        }
        Fl_Output outputLines {
          label {Lines }
          xywh {60 210 70 25} box THIN_DOWN_BOX
        }
      }
      Fl_Progress timeProgress {
        xywh {155 505 235 10} box THIN_DOWN_BOX selection_color 93
      }
      Fl_Text_Display {} {
        label {Тетрис}
        xywh {19 75 125 23} box NO_BOX labelfont 5 labelsize 32 align 33
      }
      Fl_Output textCoordXY {
        label {X,Y }
        xywh {60 480 70 25} box THIN_DOWN_BOX
      }
    }
    code {assert (nullptr == theUI);
theUI = this;
about = new AboutUI();
notice = new NoticeUI();
controls = new ControlUI();
// no way to set this in Fluid?
timeProgress->minimum(0.0);
timeProgress->maximum(1.0);
timeProgress->value(0.0);} {}
  }
  Function {~TetrisUI()} {open
  } {
    code {delete about;
about = nullptr;
theUI = nullptr;} {}
  }
  decl {static TetrisUI *theUI; // need one access point} {public local
  }
  decl {AboutUI * about;} {public local
  }
  decl {NoticeUI * notice;} {public local
  }
  decl {ControlUI * controls;} {public local
  }
} 

comment {// --------------------------------------------
// Copyright KAPSARC. Open source MIT License.
// --------------------------------------------} {in_source in_header
} 
